/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
	ext {
		springBootVersion = "${project.'springboot.version'}"
	}
	repositories {
		mavenCentral()
	}
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.'springboot.version'}")
  }
}

plugins {
  id 'com.gradle.build-scan' version '1.14'
  id 'io.franzbecker.gradle-lombok' version '1.14'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = "${project.'group'}"
version = "${project.'version'}"
sourceCompatibility = "${project.'java.version'}" // -source
targetCompatibility = "${project.'java.version'}" // -target

repositories {
  mavenCentral()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
//  compile("org.springframework.boot:spring-boot-starter-security")
//  compile("org.springframework.boot:spring-boot-starter-data-jpa")
//  compile("org.springframework.boot:spring-boot-starter-data-redis")
//  compile("com.hazelcast:hazelcast-wm:3.8+")
//  compile("org.springframework.boot:spring-boot-starter-mail")
//  compile("org.springframework.boot:spring-boot-starter-mustache")
  compile("org.springframework.boot:spring-boot-starter-thymeleaf")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-devtools")
  compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${project.'thymeleaf.extras.spring.security4.version'}")
  compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${project.'mybatis.springboot.starter.version'}")
//  compile("io.springfox:springfox-swagger2:2.8.0")
//  compile("io.springfox:springfox-swagger-ui:2.8.0")
//  compile("net.sourceforge.nekohtml:nekohtml:1.9.15+")
  compile("commons-validator:commons-validator:1.6+")
//  compile("com.google.apis:google-api-services-drive:${project.'google.apis.services.drive.version'}")
//  compile("com.google.apis:google-api-services-sheets:${project.'google.api.service.sheet.version'}")
//  compile("com.google.oauth-client:google-oauth-client-jetty:${project.'google.api.service.version'}")
//  compile("com.google.code.gson:gson:2.8.5+")
  compile("com.h2database:h2:1.4.197+")
//  compile("com.github.mygreen:super-csv-annotation:2.2")
//  compile("org.flywaydb:flyway-core:5.1.3")
  compile("org.apache.commons:commons-lang3:3.7")
  compile("ch.qos.logback:logback-classic:1.2.3+")
  compileOnly("org.projectlombok:lombok")

  // Test
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${project.'mybatis.springboot.starter.version'}")
  testCompile("net.javacrumbs.json-unit:json-unit:1.28+")
  testCompile("net.javacrumbs.json-unit:json-unit-spring:1.28+")
}

jar {
  enabled = true
}

bootJar {
  classifier = 'boot'
  mainClassName = 'com.github.narh.example001.mybatis.Application'
  launchScript()

  task copyTask(type: Copy) {
    copy {
      from 'build/libs/example001-0.0.1-SNAPSHOT-boot.jar'
      into 'docker/test/'
    }
    copy {
      from 'build/libs/example001-0.0.1-SNAPSHOT-boot.jar'
      into 'docker/stg/'
    }
    copy {
      from 'build/libs/example001-0.0.1-SNAPSHOT-boot.jar'
      into 'docker/prod/'
    }
  }
}

lombok {
  sha256 = ''
}

compileJava {
  options.encoding = "${project.'default.encoding'}"
}

compileTestJava {
  options.encoding = "${project.'default.encoding'}"
}

eclipse {
  project {
    natures "org.springsource.ide.eclipse.gradle.core.nature"
  }

  classpath {
    defaultOutputDir = file('build/classes')
    file.whenMerged {
      entries.each { source -> if( source.kind == 'src'
        && source.toString().contains('output') ) {
	  source.output = 'build/classes'
	}
      }
    }
  }
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
  ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
      inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

task delombokHelp(type: DelombokTask) {
  args "--help"
}

javadoc {
  dependsOn delombok
  source = delombok.outputDir
  failOnError = false
}

jar {
  enabled = true
}
/*
bootJar {
  classifier = 'boot'
  launchScript()
}
*/
springBoot {
  mainClassName = 'com.github.narh.example001.mybatis.Application'
}

bootRun {
  jvmArgs = [ "-Dfile.encoding=${project.'default.encoding'}" ]
}

/* vim: set ts=2 sw=2 sts=2 expandtab ff=unix fenc=utf-8: */